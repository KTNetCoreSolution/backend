name: Deploy Backend (Dev)

on:
  push:
    branches:
      - main

permissions:
  contents: write
  id-token: write

jobs:
  deploy-backend:
    runs-on: [self-hosted, Windows, X64, backend-dev]

    steps:
      ### 1. Git Safe Directory 설정
      - name: Add Safe Directory
        shell: powershell
        run: |
          $safeDir = 'D:/actions_work/netcore/source/backend'
          git config --global --add safe.directory $safeDir
          Write-Output "✅ Git safe directory added for: $safeDir"

      ### 2. 현재 소스 코드 백업
      - name: Backup Current Source Code
        shell: powershell
        run: |
          $baseDir = 'D:\actions_work\netcore'
          $sourceDir = "$baseDir\source\backend"
          $backupBaseDir = "$baseDir\backup\source\backend"

          # 현재 월별 백업 디렉터리 생성
          $currentMonthDir = Join-Path -Path $backupBaseDir -ChildPath (Get-Date -Format 'yyyyMM')
          if (!(Test-Path -Path $currentMonthDir)) {
              New-Item -ItemType Directory -Path $currentMonthDir -Force
          }

          # 백업 파일 생성 (ZIP 형식으로 저장)
          $currentDateTime = "$(Get-Date -Format 'yyyyMMdd-HHmmss').zip"
          $backupFile = Join-Path -Path $currentMonthDir -ChildPath $currentDateTime
          Compress-Archive -Path "$sourceDir\*" -DestinationPath $backupFile -Force

          Write-Output "✅ Source backup created at: $backupFile"

      ### 3. 최신 소스 코드 가져오기
      - name: Checkout Source Code
        shell: powershell
        run: |
          $repoUrl = "https://${{ secrets.GITHUB_ACTOR }}:${{ secrets.KTNETCOREACTION }}@github.com/KTNetCoreSolution/backend.git"
          $branch = 'main'
          $sourceDir = 'D:\actions_work\netcore\source\backend'

          # 기존 소스 폴더 삭제
          if (Test-Path -Path $sourceDir) {
              Remove-Item -Recurse -Force -Path $sourceDir
              Write-Output "✅ Removed existing source directory: $sourceDir"
          }
          
          # 새로운 소스 폴더 생성 및 소스 클론
          New-Item -ItemType Directory -Path $sourceDir -Force
          git clone --branch $branch $repoUrl $sourceDir

          Write-Output "✅ Source code cloned to: $sourceDir"
          
      ### 4. .env 파일 복사
      - name: Copy .env file to multiple locations
        shell: powershell
        run: |
          # 원본 .env 파일 경로
          $envSourcePath = 'D:\actions_work\netcore\env\backend.env'

          # 복사 대상 경로들
          $destinationPaths = @(
              'D:\actions_work\netcore\source\backend\.env',
              'D:\actions_work\netcore\deploy\backend\.env'
          )

          # .env 파일 존재 여부 확인
          if (-Not (Test-Path -Path $envSourcePath)) {
              Write-Output "❌ .env source file not found: $envSourcePath"
              exit 1 # 실패 처리
          }

          # 각 경로로 복사
          foreach ($envDestinationPath in $destinationPaths) {
              Copy-Item -Path $envSourcePath -Destination $envDestinationPath -Force
              Write-Output "✅ .env file copied to: $envDestinationPath"
          }

       ### 5. Java 환경 확인
      - name: Verify Java Environment
        shell: powershell
        run: |
          Write-Output "🔍 Checking Java environment..."
          java -version
          If ($?) {
              Write-Output "✅ Java installation verified."
          } Else {
              Write-Error "❌ Java is not installed or incorrectly configured. Please check the environment."
              exit 1
          }

      ### 6. .env 파일 로드 및 환경 변수 설정
      - name: Load .env File
        shell: powershell
        run: |
          # `.env` 파일 경로 설정 (GitHub Actions 작업 디렉토리 기준)
          $envFilePath = "D:\actions_work\netcore\source\backend\.env"
      
          # `.env` 파일 존재 여부 확인
          if (!(Test-Path -Path $envFilePath)) {
              Write-Error "❌ .env 파일이 존재하지 않습니다: $envFilePath"
              exit 1
          }
      
          Write-Output "📂 Loading environment variables from: $envFilePath"
          
          try {
              # `.env` 파일 내용을 읽어 환경 변수 설정
              $lines = Get-Content -Path $envFilePath
              foreach ($line in $lines) {
                  # 빈 줄이나 주석(#으로 시작) 무시
                  if ($line -match '^\s*$' -or $line -match '^\s*#') {
                      continue
                  }
                  # 정규 표현식: 키=값 형식 파싱 (그룹 이름 사용)
                  if ($line -match '^(?<key>[A-Za-z_][A-Za-z0-9_]*)\s*=\s*(?<value>.*)$') {
                      $key = $matches['key']
                      $value = $matches['value'].Trim(' "''')
                      [System.Environment]::SetEnvironmentVariable($key, $value, "Process")
                      Write-Output "✅ Loaded environment variable: $key = $value"
                  } else {
                      Write-Warning "⚠️ 유효하지 않은 .env 라인 무시: $line"
                  }
              }
          } catch {
              Write-Error "❌ .env 파일 로드 중 오류 발생: $($_.Exception.Message)"
              exit 1
          }
      
      ### 7. Backend 빌드 (테스트 미포함)     
      - name: Build Backend
        shell: powershell
        run: |
          $buildDir = "D:\actions_work\netcore\source\backend"
          cd $buildDir
      
          try {
              # Gradle 빌드 수행
              gradle clean build -x test
              Write-Output "✅ Backend build completed successfully."
          } catch {
              Write-Error "❌ Backend build failed."
              exit 1
          }

      ### 8. 빌드 결과물 배포 디렉터리로 복사
      - name: Deploy Built JAR
        shell: powershell
        run: |
          $baseDir = "D:\actions_work\netcore"
          $sourceDir = "$baseDir\source\backend\build\libs"
          $deployDir = "$baseDir\deploy\backend"

          # 실행 가능한 JAR 파일 검색 (plain 제외)
          $jarFile = (Get-ChildItem -Path $sourceDir -Filter '*.jar' | Where-Object { $_.Name -notlike '*-plain.jar' } | Sort-Object LastWriteTime -Descending | Select-Object -First 1).FullName

          if (-not $jarFile) {
              Write-Error "❌ No executable JAR file found in: $sourceDir"
              exit 1
          }

          if (!(Test-Path -Path $deployDir)) {
              New-Item -ItemType Directory -Path $deployDir -Force
              Write-Output "✅ Deploy directory created at: $deployDir"
          }

          # JAR 파일 복사
          Copy-Item -Path $jarFile -Destination $deployDir -Force
          Write-Output "✅ Executable JAR copied to: $deployDir"
          
      ### 9. 불필요한 디렉터리 삭제
      - name: Clean Unnecessary Directories
        shell: powershell
        run: |
          $foldersToDelete = @(
              "D:\actions_work\netcore\backend",
              "D:\actions_work\netcore\backend\backend"
          )

          foreach ($folder in $foldersToDelete) {
              if (Test-Path -Path $folder) {
                  try {
                      Remove-Item -Path $folder -Recurse -Force
                      Write-Output "✅ Deleted folder: $folder"
                  } catch {
                      Write-Output "❌ Failed to delete folder: $folder. Error: $($_.Exception.Message)"
                      exit 1
                  }
              } else {
                  Write-Output "ℹ️ Folder does not exist: $folder"
              }
          }

      ### 10. 기존 백엔드 애플리케이션 종료 및 새로 실행
      - name: Restart Backend Service
        shell: powershell
        run: |
          # 실행할 PowerShell 스크립트 경로
          $scriptPath = 'D:\actions_runner_backend\run_backend.ps1'

          # 스크립트가 존재하는지 확인
          if (-Not (Test-Path -Path $scriptPath)) {
              Write-Error "❌ Backend runner script not found: $scriptPath"
              exit 1
          }

          # 스크립트 실행
          Write-Output "✅ Running backend script: $scriptPath"
          try {
              # PowerShell 스크립트 실행
              & $scriptPath
              if ($LASTEXITCODE -eq 0) {
                  Write-Output "✅ Backend application restarted successfully."
              } else {
                  Write-Error "❌ Error occurred while restarting backend. Exit code: $LASTEXITCODE"
                  exit $LASTEXITCODE
              }
          } catch {
              Write-Error "❌ An exception occurred while running the script: $($_.Exception.Message)"
              exit 1
          }