name: Deploy Backend (Dev)

on:
  push:
    branches:
      - main

permissions:
  contents: write
  id-token: write

jobs:
  deploy-backend:
    runs-on: [self-hosted, Windows, X64, backend-dev]

    steps:
      ### 1. Git Safe Directory 설정
      - name: Add Safe Directory
        shell: powershell
        run: |
          $safeDir = 'D:/actions_work/netcore/source/backend'
          git config --global --add safe.directory $safeDir
          Write-Output "✅ Git safe directory added for: $safeDir"

      ### 2. 현재 소스 코드 백업
      - name: Backup Current Source Code
        shell: powershell
        run: |
          $baseDir = 'D:\actions_work\netcore'
          $sourceDir = "$baseDir\source\backend"
          $backupBaseDir = "$baseDir\backup\source\backend"

          # 현재 월별 백업 디렉터리 생성
          $currentMonthDir = Join-Path -Path $backupBaseDir -ChildPath (Get-Date -Format 'yyyyMM')
          if (!(Test-Path -Path $currentMonthDir)) {
              New-Item -ItemType Directory -Path $currentMonthDir -Force
          }

          # 백업 파일 생성 (ZIP 형식으로 저장)
          $currentDateTime = "$(Get-Date -Format 'yyyyMMdd-HHmmss').zip"
          $backupFile = Join-Path -Path $currentMonthDir -ChildPath $currentDateTime
          Compress-Archive -Path "$sourceDir\*" -DestinationPath $backupFile -Force

          Write-Output "✅ Source backup created at: $backupFile"

      ### 3. 최신 소스 코드 가져오기
      - name: Checkout Source Code
        shell: powershell
        run: |
          $repoUrl = "https://${{ secrets.GITHUB_ACTOR }}:${{ secrets.KTNETCOREACTION }}@github.com/KTNetCoreSolution/backend.git"
          $branch = 'main'
          $sourceDir = 'D:\actions_work\netcore\source\backend'

          # 기존 소스 폴더 삭제
          if (Test-Path -Path $sourceDir) {
              Remove-Item -Recurse -Force -Path $sourceDir
              Write-Output "✅ Removed existing source directory: $sourceDir"
          }
          
          # 새로운 소스 폴더 생성 및 소스 클론
          New-Item -ItemType Directory -Path $sourceDir -Force
          git clone --branch $branch $repoUrl $sourceDir

          Write-Output "✅ Source code cloned to: $sourceDir"
          
      ### 4. .env 파일 복사
      - name: Copy .env file
        shell: powershell
        run: |
          $envSourcePath = 'D:\actions_work\netcore\env\backend.env'
          $envDestinationPath = 'D:\actions_work\netcore\source\backend\.env'

          # .env 파일이 존재하는지 확인하고 복사
          if (Test-Path -Path $envSourcePath) {
              Copy-Item -Path $envSourcePath -Destination $envDestinationPath -Force
              Write-Output "✅ .env file copied to: $envDestinationPath"
          } else {
              Write-Output "❌ .env source file not found: $envSourcePath"
              exit 1  # 실패 처리
          }

       ### 5. Java 환경 확인
      - name: Verify Java Environment
        shell: powershell
        run: |
          Write-Output "🔍 Checking Java environment..."
          java -version
          If ($?) {
              Write-Output "✅ Java installation verified."
          } Else {
              Write-Error "❌ Java is not installed or incorrectly configured. Please check the environment."
              exit 1
          }

      ### 6. .env 파일 로드 및 환경 변수 설정
      - name: Load .env File
        shell: powershell
        run: |
          $envFilePath = "D:\actions_work\netcore\source\backend\.env"

          # .env 파일 경로
          $envFilePath = "D:\actions_work\netcore\source\backend\.env"
          
          # .env 파일 존재 여부 확인
          if (!(Test-Path -Path $envFilePath)) {
              Write-Error "❌ .env 파일이 존재하지 않습니다: $envFilePath"
              exit 1
          }
          
          Write-Output "📂 Loading environment variables from: $envFilePath"
          
          # .env 파일 읽기 및 처리
          try {
              $lines = Get-Content -Path $envFilePath
              Write-Output "📋 .env 파일 내용 (${lines.Count} 라인):"
              Write-Output $lines
          
              # 각 라인 순회 및 환경 변수 설정
              $lineNumber = 0  # 라인 번호 추적
              foreach ($line in $lines) {
                  $lineNumber++
                  try {
                      # 빈 줄 또는 주석 무시
                      if ($line -match "^\s*$" -or $line -match "^\s*#") {
                          continue
                      }
          
                      # 정규식으로 KEY=VALUE 매칭 시도
                      if ($line -match "^(?[A-Za-z_][A-Za-z0-9_]*)=(?.*)$") {
                          $key = $matches['key']
                          $value = $matches['value'].Trim(' "')
                          [System.Environment]::SetEnvironmentVariable($key, $value, "Process")
                          Write-Output "✅ Line $lineNumber: Loaded environment variable: $key = $value"
                      } else {
                          Write-Error "⚠️ Line $lineNumber: Invalid format in .env file: $line"
                      }
                  } catch {
                      # 특정 라인에서 발생하는 에러 처리
                      Write-Error "❌ Line $lineNumber: Failed to process line: $line"
                      Write-Error "Exception: $($_.Exception.Message)"
                  }
              }
          } catch {
              # 파일 전체 읽기 실패에 대한 에러 처리
              Write-Error "❌ .env 파일 로드 실패: $envFilePath"
              Write-Error "Exception: $($_.Exception.Message)"
              Write-Error "StackTrace: $($_.Exception.StackTrace)"
              exit 1
          }

      ### 7. Backend 빌드 (테스트 미포함)
      - name: Build Backend
        shell: powershell
        run: |
          $buildDir = "D:\actions_work\netcore\source\backend"
          cd $buildDir
          
          # Gradle 빌드 수행 (테스트 제외)
          try {
              gradle clean build -x test
              Write-Output "✅ Backend build completed successfully (tests excluded)."
          } catch {
              Write-Error "❌ Backend build failed. Please check the build logs."
              exit 1
          }

      ### 8. 빌드 결과물 배포 디렉터리로 복사
      - name: Deploy Built JAR
        shell: powershell
        run: |
          $baseDir = "D:\actions_work\netcore"
          $sourceDir = "$baseDir\source\backend\build\libs"
          $deployDir = "$baseDir\deploy\backend"

          # 실행 가능한 JAR 파일 검색 (plain 제외)
          $jarFile = (Get-ChildItem -Path $sourceDir -Filter '*.jar' | Where-Object { $_.Name -notlike '*-plain.jar' } | Sort-Object LastWriteTime -Descending | Select-Object -First 1).FullName

          if (-not $jarFile) {
              Write-Error "❌ No executable JAR file found in: $sourceDir"
              exit 1
          }

          if (!(Test-Path -Path $deployDir)) {
              New-Item -ItemType Directory -Path $deployDir -Force
              Write-Output "✅ Deploy directory created at: $deployDir"
          }

          # JAR 파일 복사
          Copy-Item -Path $jarFile -Destination $deployDir -Force
          Write-Output "✅ Executable JAR copied to: $deployDir"

      ### 9. 기존 백엔드 애플리케이션 종료 및 새로 실행
      - name: Restart Backend Service
        shell: powershell
        run: |
          $deployDir = 'D:\actions_work\netcore\deploy\backend'

          # 배포 디렉토리에서 최신 JAR 파일 검색
          $jarFile = (Get-ChildItem -Path $deployDir -Filter '*.jar' `
                      | Sort-Object LastWriteTime -Descending `
                      | Select-Object -First 1).Name

          if (-not $jarFile) {
              Write-Error "❌ No JAR file found in $deployDir."
              exit 1
          }

          # 기존 실행 중인 애플리케이션 종료
          $process = Get-WmiObject -Query "Select * From Win32_Process Where Name = 'java.exe'" `
                     | Where-Object { $_.CommandLine -match $jarFile }

          if ($process) {
              Stop-Process -Id $process.ProcessId -Force
              Write-Output "✅ Java process with PID $($process.ProcessId) stopped."
          } else {
              Write-Output "⚠️ No matching Java process found to stop."
          }

          # 최신 JAR 파일 실행
          Start-Process -FilePath "java.exe" -ArgumentList "-jar `"$deployDir\$jarFile`"" `
                        -NoNewWindow `
                        -RedirectStandardOutput "$deployDir\output.log" `
                        -RedirectStandardError "$deployDir\error.log"
          Write-Output "✅ Backend service restarted with JAR: $jarFile. Logs are available in $deployDir."